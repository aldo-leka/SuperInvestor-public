@page "/companies/{ticker}"

@using System.Globalization
@using Microsoft.AspNetCore.Identity
@using Microsoft.Net.Http.Headers
@using Microsoft.EntityFrameworkCore
@using SuperInvestor.Data
@using System.Text

@inject NavigationManager NavigationManager
@inject YahooClient Yahoo
@inject CompanyTickerService CompanyTickerService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserService UserService
@inject FilingCategoryService FilingCategoryService
@inject NoteService NoteService
@inject ToastService ToastService
@inject IJSRuntime JSRuntime

@if (isLoading)
{
    <CompanySkeleton />
}
else
{
    <div class="container mt-4">
        <h1 class="mb-4">@document.Name</h1>
        <p class="lead">@document.Exchanges[0]: @document.Tickers[0]</p>

        <div class="row mb-4">
            <div class="col-md-6">
                <SuperCard Title="Share Price">
                    <h3 class="text-center">@lastClose</h3>
                </SuperCard>
            </div>
            <div class="col-md-6">
                <SuperCard Title="Market Cap">
                    <h3 class="text-center">@marketCap</h3>
                </SuperCard>
            </div>
        </div>
        <div class="col-md-12 mb-4">
            <SuperButton OnClick="ExportNotes" Type="ButtonType.Outline">
                <i class="fas fa-file-export me-2"></i>Export Notes
            </SuperButton>
        </div>

        <div class="row">
            @foreach (var filingGroup in new[] {
                ("Financials", financials),
                ("Prospectuses", prospectuses),
                ("Ownership", ownership),
                ("News", news),
                ("Proxies", proxies),
                ("Other", other)
                })
            {
                <div class="col-md-4 mb-4">
                    <SuperCard Title="@filingGroup.Item1">
                        <div class="table-responsive" style="max-height: 300px; overflow-y: auto;">
                            <table class="table table-striped table-hover">
                                <thead>
                                    <tr>
                                        <th>Date</th>
                                        <th>Form</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var filing in filingGroup.Item2)
                                    {
                                        <tr>
                                            <td colspan="2">
                                                <a href="/companies/@ticker.Symbol/@filing.AccessionNumber" class="d-block text-decoration-none text-body">
                                                    <div class="d-flex justify-content-between align-items-center">
                                                        <span>
                                                            @filing.FilingDate
                                                            @if (filing.HasNotes)
                                                            {
                                                                <i class="fas fa-sticky-note text-primary ml-2" title="You have notes for this filing"></i>
                                                            }
                                                        </span>
                                                        <span>@filing.Form</span>
                                                    </div>
                                                </a>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </SuperCard>
                </div>
            }
        </div>
    </div>
}

<SuperToast @ref="ToastComponent" />

<script>
    window.downloadFile = (fileName, base64String) => {
        const link = document.createElement('a');
        link.href = 'data:text/csv;base64,' + base64String;
        link.download = fileName;
        link.click();
    };
</script>

@code {
    [Parameter]
    public string Ticker { get; set; }

    private Ticker ticker;
    private bool isLoading = true;
    private Submission document;
    private Quote quote;
    private ApplicationUser user;
    private List<Models.Filing> financials = [];
    private List<Models.Filing> prospectuses = [];
    private List<Models.Filing> ownership = [];
    private List<Models.Filing> news = [];
    private List<Models.Filing> proxies = [];
    private List<Models.Filing> other = [];
    private Dictionary<string, string> currencySymbols = new Dictionary<string, string>
    {
        { "USD", "$" }, { "EUR", "€" }, { "JPY", "¥" }, { "GBP", "£" },
        { "AUD", "A$" }, { "CAD", "C$" }, { "CHF", "CHF" }, { "CNY", "¥" },
        { "SEK", "kr" }, { "NZD", "NZ$" }, { "MXN", "$" }, { "SGD", "S$" },
        { "HKD", "HK$" }, { "NOK", "kr" }, { "KRW", "₩" }, { "TRY", "₺" },
        { "RUB", "₽" }, { "INR", "₹" }, { "BRL", "R$" }, { "ZAR", "R" },
        { "THB", "฿" }, { "MYR", "RM" }, { "IDR", "Rp" }, { "PHP", "₱" },
        { "CZK", "Kč" }, { "HUF", "Ft" }, { "PLN", "zł" }, { "ILS", "₪" },
        { "AED", "د.إ" }, { "SAR", "﷼" }, { "NGN", "₦" }, { "ARS", "$" },
        { "CLP", "$" }, { "COP", "$" }, { "PEN", "S/" }, { "PKR", "₨" },
        { "VND", "₫" }, { "BDT", "৳" }, { "UAH", "₴" }, { "KZT", "₸" },
        { "EGP", "£" }, { "MAD", "MAD" }, { "DZD", "دج" }, { "IQD", "ع.د" },
        { "LBP", "ل.ل" }, { "JOD", "د.ا" }, { "TND", "د.ت" }, { "OMR", "ر.ع." },
        { "QAR", "ر.ق" }, { "BHD", "ب.د" }, { "KWD", "د.ك" }, { "BND", "B$" },
        { "MMK", "K" }, { "LKR", "රු" }, { "MVR", "ރ." }, { "NPR", "रू" },
        { "AFN", "؋" }, { "MDL", "L" }, { "BYN", "Br" }, { "GEL", "₾" },
        { "AZN", "₼" }, { "AMD", "֏" }, { "MNT", "₮" }, { "UZS", "сўм" },
        { "TMT", "m" }, { "KGS", "лв" }, { "XAF", "FCFA" }, { "XOF", "CFA" },
        { "XCD", "$" }, { "BSD", "$" }, { "BBD", "$" }, { "BZD", "$" },
        { "BMD", "$" }, { "BTN", "Nu." }, { "KYD", "$" },
        { "FJD", "$" }, { "GIP", "£" }, { "GYD", "$" }, { "JMD", "J$" },
        { "LRD", "$" }, { "NAD", "$" }, { "SBD", "$" }, { "SRD", "$" },
        { "TTD", "$" }, { "ZWD", "$" }
    };

    private string lastClose;
    private string marketCap;
    private SuperToast ToastComponent { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var auth = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (auth.User.Identity.IsAuthenticated)
        {
            user = await UserService.GetUser();
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        isLoading = true;

        financials.Clear();
        prospectuses.Clear();
        ownership.Clear();
        news.Clear();
        proxies.Clear();
        other.Clear();

        ticker = await CompanyTickerService.GetTickerBySymbolAsync(Ticker);
        if (ticker is not null)
        {
            var client = new HttpClient();
            client.DefaultRequestHeaders.TryAddWithoutValidation(HeaderNames.UserAgent, "Lekasoft aldo@lekasoft.com");
            document = await client.GetFromJsonAsync<Submission>($"https://data.sec.gov/submissions/CIK{ticker.Cik.ToString().PadLeft(10, '0')}.json");

            var categorizedFilings = FilingCategoryService.CategorizeFilings(document);

            financials = categorizedFilings.Where(f => f.Category == "Financials").ToList();
            prospectuses = categorizedFilings.Where(f => f.Category == "Prospectuses").ToList();
            ownership = categorizedFilings.Where(f => f.Category == "Ownership").ToList();
            news = categorizedFilings.Where(f => f.Category == "News").ToList();
            proxies = categorizedFilings.Where(f => f.Category == "Proxies").ToList();
            other = categorizedFilings.Where(f => f.Category == "Other").ToList();

            quote = await Yahoo.GetAsync(document.Tickers[0]);
            if (quote is not null && string.IsNullOrEmpty(quote.QuoteSummary.Error))
            {
                currencySymbols.TryGetValue(quote.QuoteSummary.Result[0].SummaryDetail.Currency.ToUpper(), out string symbol);
                lastClose = $"{symbol}{quote.QuoteSummary.Result[0].SummaryDetail.PreviousClose.ToString("0.#", CultureInfo.InvariantCulture)}";
                marketCap = $"{symbol}{ConvertToReadableFormat(quote.QuoteSummary.Result[0].SummaryDetail.MarketCap)}";
            }

            var auth = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            if (auth.User.Identity.IsAuthenticated)
            {
                var userNotes = await (await NoteService.GetNotes(user.Id, Ticker))
                    .Select(n => n.AccessionNumber)
                    .Distinct()
                    .ToListAsync();

                foreach (var filingGroup in new[] { financials, prospectuses, ownership, news, proxies, other })
                {
                    foreach (var filing in filingGroup)
                    {
                        filing.HasNotes = userNotes.Contains(filing.AccessionNumber);
                    }
                }
            }
        }
        else
        {
            NavigationManager.NavigateTo("Error/404");
        }

        isLoading = false;
    }

    private static string ConvertToReadableFormat(long number)
    {
        if (number >= 1_000_000_000_000)
            return (number / 1_000_000_000_000D).ToString("0.#", CultureInfo.InvariantCulture) + " trillion";
        if (number >= 1_000_000_000)
            return (number / 1_000_000_000D).ToString("0.#", CultureInfo.InvariantCulture) + " billion";
        if (number >= 1_000_000)
            return (number / 1_000_000D).ToString("0.#", CultureInfo.InvariantCulture) + " million";
        if (number >= 1_000)
            return (number / 1_000D).ToString("0.#", CultureInfo.InvariantCulture) + " thousand";

        return number.ToString();
    }

    private async Task ExportNotes()
    {
        if (user == null)
        {
            NavigationManager.NavigateTo("Account/Login");
            return;
        }

        var notes = await NoteService.GetNotes(user.Id, Ticker);
        var notesData = await notes.ToListAsync();

        if (!notesData.Any())
        {
            await ToastComponent.ShowToast("Export", "No notes to export", 3000);
            return;
        }

        var csv = new StringBuilder();
        csv.AppendLine("Filing Date,Form,Note");

        var accessionNumbers = document.Filings.Recent.AccessionNumber.ToList();
        foreach (var note in notesData)
        {
            var filingIndex = accessionNumbers.IndexOf(note.AccessionNumber);
            if (filingIndex > -1)
            {
                var filingDate = document.Filings.Recent.FilingDate[filingIndex];
                var form = document.Filings.Recent.Form[filingIndex];
                var text = note.Text.Replace("\"", "\"\"").Replace("\r", "").Replace("\n", " ");
                csv.AppendLine($"{filingDate},{form},\"{text}\"");
            }
        }

        var fileName = $"{Ticker}_notes_{DateTime.Now:yyyyMMdd}.csv";
        var fileContent = csv.ToString();
        var fileBytes = System.Text.Encoding.UTF8.GetBytes(fileContent);

        await JSRuntime.InvokeVoidAsync("downloadFile", fileName, Convert.ToBase64String(fileBytes));
    }
}